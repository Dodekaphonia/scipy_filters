# -*- coding: utf-8 -*-

"""
/***************************************************************************
 SciPyFilters
                                 A QGIS plugin
 Filter collection implemented with SciPy
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-03-03
        copyright            : (C) 2024 by Florian Neukirchen
        email                : mail@riannek.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Florian Neukirchen'
__date__ = '2024-03-03'
__copyright__ = '(C) 2024 by Florian Neukirchen'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from scipy import ndimage
import numpy as np
from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessingParameterString,
                       QgsProcessingParameterDefinition,
                       QgsProcessingParameterNumber,
                       QgsProcessingException,)

from ..scipy_algorithm_baseclasses import SciPyAlgorithm

from ..ui.structure_widget import (StructureWidgetWrapper, 
                                  SciPyParameterStructure,)

from ..ui.origin_widget import (OriginWidgetWrapper, 
                               SciPyParameterOrigin,)

from ..helpers import (str_to_int_or_list, 
                      check_structure, 
                      str_to_array, 
                      kernelexamples, 
                      get_np_dtype)


class SciPyTransformToPCAlgorithm(SciPyAlgorithm):
    """
    Transform to principal components

    """

    EIGENVECTORS = 'EIGENVECTORS'
    MEAN = 'MEAN'

    # Overwrite constants of base class
    _name = 'transform_to_PC'
    _displayname = 'Transform to principal components'
    _outputname = None
    _groupid = "pca" 
    _default_dtype = 6 
    # _outbands = 1
    _help = """
            Transform to principal components using matrix of eigenvectors


            """


    def initAlgorithm(self, config):
        # Set dimensions to 3
        self._dimension = self.Dimensions.threeD
        super().initAlgorithm(config)


    def insert_parameters(self, config):
        super().insert_parameters(config)

        self.addParameter(QgsProcessingParameterString(
            self.EIGENVECTORS,
            self.tr('Eigenvectors'),
            defaultValue="",
            multiLine=True,
            optional=False,
            ))
    
    def get_parameters(self, parameters, context):
        kwargs = super().get_parameters(parameters, context)

        V = self.parameterAsString(parameters, self.EIGENVECTORS, context)
        kwargs["V"] = str_to_array(V, dims=None, to_int=False)
        print(kwargs["V"])
        return kwargs


        
    # The function to be called, to be overwritten
    def get_fct(self):
        return self.myfnct
    
    def myfnct(self, a, **kwargs):

        dtype = kwargs.pop("output")
        V = kwargs.pop("V")

        orig_shape = a.shape
        bands = orig_shape[0]

        # Flatten and float64
        a = a.reshape(bands, -1).astype("float64")
        a = a.T

        n_pixels = a.shape[0]

        # substract mean

        col_mean = a.mean(axis=0)
        col_mean = col_mean[np.newaxis, :]

        a = a - col_mean

        # Transform to PC
        out = a @ V
        out = out.T.reshape(orig_shape)

        return out.astype(dtype)
    


        

    def checkParameterValues(self, parameters, context):
        layer = self.parameterAsRasterLayer(parameters, self.INPUT, context)
        if layer.bandCount() == 1:
            return (False, self.tr("Pixel statistics only possible if layer has more than 1 band."))
        return super().checkParameterValues(parameters, context)
    
    def createInstance(self):
        return SciPyTransformToPCAlgorithm()