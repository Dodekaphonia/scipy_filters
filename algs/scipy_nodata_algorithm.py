# -*- coding: utf-8 -*-

"""
/***************************************************************************
 SciPyFilters
                                 A QGIS plugin
 Filter collection implemented with SciPy
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-03-03
        copyright            : (C) 2024 by Florian Neukirchen
        email                : mail@riannek.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Florian Neukirchen'
__date__ = '2024-03-03'
__copyright__ = '(C) 2024 by Florian Neukirchen'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'


from osgeo import gdal
import numpy as np
import json
from qgis.PyQt.QtCore import QCoreApplication
from qgis._core import QgsProcessingContext, QgsProcessingFeedback
from qgis.core import (QgsProcessingAlgorithm,
                       QgsProcessingParameterString,
                       QgsProcessingParameterDefinition,
                       QgsProcessingParameterNumber,
                       QgsProcessingException,
                       QgsProcessingLayerPostProcessorInterface,
                       QgsProcessingParameterBoolean,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterRasterDestination)

from processing.core.ProcessingConfig import ProcessingConfig


from ..helpers import (str_to_array, 
                      tr,
                      bandmean,
                      number_of_windows,
                      get_windows,
                      DEFAULTWINDOWSIZE)

from ..scipy_algorithm_baseclasses import groups

class SciPyFilterNoDataMask(QgsProcessingAlgorithm):
    SEPARATE = 'SEPARATE'
    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'

    _name = 'no_data_mask'
    _displayname = tr('No data mask')

    def initAlgorithm(self, config):

        try:
            self.windowsize = int(ProcessingConfig.getSetting('WINDOWSIZE'))
        except TypeError:
            self.windowsize = DEFAULTWINDOWSIZE
        if self.windowsize == 0:
            self.windowsize = None

        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.INPUT,
                tr('Input layer'),
            )
        )

        self.addParameter(QgsProcessingParameterBoolean(
            self.SEPARATE,
            tr('Each band seperate'),
            optional=True,
            defaultValue=False,
        ))

        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT,
                self.displayName(),
            ))
        
    def get_parameters(self, parameters, context):
        
        self.inputlayer = self.parameterAsRasterLayer(parameters, self.INPUT, context)
        self.output_raster = self.parameterAsOutputLayer(parameters, self.OUTPUT,context)
        self.separate = self.parameterAsBool(parameters, self.SEPARATE, context)


    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        feedback.setProgress(0)

        self.get_parameters(parameters, context)

        self.ds = gdal.Open(self.inputlayer.source())

        if not self.ds:
            raise Exception("Failed to open Raster Layer")
        
        self.bandcount = self.ds.RasterCount

        if self.separate:
            outbands = self.bandcount
        else:
            outbands = 1

        # Prepare output
        driver = gdal.GetDriverByName('GTiff')

        self.out_ds = driver.Create(
            self.output_raster, 
            xsize = self.ds.RasterXSize,
            ysize = self.ds.RasterYSize,
            bands = outbands,
            eType = 1) # Data type is Byte (uint8)
        
        self.out_ds.SetGeoTransform(self.ds.GetGeoTransform())
        self.out_ds.SetProjection(self.ds.GetProjection())

        if feedback.isCanceled():
            return {}
        
        total = number_of_windows(self.ds.RasterXSize, self.ds.RasterYSize, windowsize=self.windowsize) + 1
        counter = 1
        pixelcount = 0

        windows = get_windows(self.ds.RasterXSize, self.ds.RasterYSize, windowsize=self.windowsize, margin=0)

        for win in windows:
            a = self.ds.ReadAsArray(*win.gdalin)
            nodata_mask = np.zeros((a.shape), dtype=bool)

            # Just in case get no data value of each band seperately
            for i in range(self.bandcount):
                nodata = self.ds.GetRasterBand(i+1).GetNoDataValue()
                if a.ndim == 2:
                    nodata_mask[a == nodata] = True
                elif a.ndim == 3:
                    nodata_mask[i][a[i] == nodata] = True
                    

            if self.separate or a.ndim == 2:
                self.out_ds.WriteArray(nodata_mask, *win.gdalout)
                pixelcount = pixelcount + np.sum(np.any(nodata_mask, axis=0).astype(int))
            else:
                self.out_ds.WriteArray(np.any(nodata_mask, axis=0), *win.gdalout)
                pixelcount = pixelcount + np.sum(np.any(nodata_mask, axis=0).astype(int))
                               
                feedback.setProgress(counter * 100 / total)
                counter += 1
                if feedback.isCanceled():
                    return {}
                
        # Free some memory
        self.ds = None
        a = None

        # Close the dataset to write file to disk
        self.out_ds = None 

        feedback.pushInfo(tr("Number of pixels with no data value: {} ").format(pixelcount))
        feedback.setProgress(100)

        return {
            self.OUTPUT: self.output_raster, 
            'no data pixels': pixelcount,
            }
    
    def shortHelpString(self):
        """
        Returns the help string that is shown on the right side of the 
        user interface.
        """
        return """
            Return mask of no data value, with 1 for no data, 0 for data.

            <b>Seperate</b> Return seperate mask for each band. Otherwise, \
            return one band, with value 1 if any band has no data.

            """
    

    def name(self):
        return self._name
    
    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return tr(self._displayname)
    
    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        s = groups.get(self.groupId())
        return tr(s)
    
    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return "no_data"
    
    def createInstance(self):
        return SciPyFilterNoDataMask()