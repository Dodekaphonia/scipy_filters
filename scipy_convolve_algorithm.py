# -*- coding: utf-8 -*-

"""
/***************************************************************************
 SciPyFilters
                                 A QGIS plugin
 Filter collection implemented with SciPy
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-03-03
        copyright            : (C) 2024 by Florian Neukirchen
        email                : mail@riannek.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Florian Neukirchen'
__date__ = '2024-03-03'
__copyright__ = '(C) 2024 by Florian Neukirchen'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from typing import Dict, Tuple
from osgeo import gdal
from qgis._core import QgsProcessingContext
from scipy import ndimage
import numpy as np
import json
from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterRasterDestination,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterString,
                       QgsProcessingException,
                        )


class SciPyConvolveAlgorithm(QgsProcessingAlgorithm):
    """
    Convolution Filter
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'
    KERNEL = 'KERNEL'
    NORMALIZATION = 'NORMALIZATION'


    MODE = 'MODE'
    CVAL = 'CVAL'
    ORIGIN = 'ORIGIN'


    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # Add parameters
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.INPUT,
                self.tr('Input layer'),
            )
        )

        default_kernel = "[[1, 2, 1],\n[2, 4, 2],\n[1, 2, 1]]"

        self.addParameter(QgsProcessingParameterString(
            self.KERNEL,
            self.tr('Kernel'),
            defaultValue=default_kernel,
            multiLine=True,
            ))
        
        self.addParameter(QgsProcessingParameterNumber(
            self.NORMALIZATION,
            self.tr('Normalization (devide kernel values by number). Set to 0 to devide by sum of kernel values.'),
            QgsProcessingParameterNumber.Type.Double,
            defaultValue=0, 
            optional=True, 
            minValue=0, 
            # maxValue=100
            )) 

    
        self.modes = ['reflect', 'constant', 'nearest', 'mirror', 'wrap']

        self.addParameter(QgsProcessingParameterEnum(
            self.MODE,
            self.tr('Border Mode'),
            self.modes,
            defaultValue=0)) 
        
        self.addParameter(QgsProcessingParameterNumber(
            self.CVAL,
            self.tr('Constant value past edges for border mode "constant"'),
            QgsProcessingParameterNumber.Type.Double,
            defaultValue=0, 
            optional=True, 
            minValue=0, 
            # maxValue=100
            ))        

        self.addParameter(QgsProcessingParameterNumber(
            self.ORIGIN,
            self.tr('Origin (shift the filter)'),
            QgsProcessingParameterNumber.Type.Integer,
            defaultValue=0, 
            optional=True, 
            ))    


        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT,
            self.tr("Convolution")))
        
        self.weights = None
        

    def checkParameterValues(self, parameters, context):     

        kernel = self.parameterAsString(parameters, self.KERNEL, context)

        try:
            decoded = json.loads(kernel)
            _ = np.array(decoded, dtype=np.float32)
        except (json.decoder.JSONDecodeError, ValueError, TypeError):
            return (False, self.tr('Can not parse kernel string'))
        
        ok, s = super().checkParameterValues(parameters, context)
        return (ok, s)

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Get Parameters
        kargs = {}
        inputlayer = self.parameterAsRasterLayer(parameters, self.INPUT, context)
        # bands = self.parameterAsMatrix(parameters, self.BANDS, context)


        self.output_raster = self.parameterAsOutputLayer(parameters, self.OUTPUT,context)
        kernel = self.parameterAsString(parameters, self.KERNEL, context)
        normalization = self.parameterAsDouble(parameters, self.NORMALIZATION, context)

        mode = self.parameterAsInt(parameters, self.MODE, context) 
        kargs['mode'] = self.modes[mode]

        cval = self.parameterAsDouble(parameters, self.CVAL, context)
        if cval:
            kargs['cval'] = cval

        origin = self.parameterAsInt(parameters, self.ORIGIN, context)
        if origin:
            kargs['origin'] = origin

        print("weights", self.weights)

        # Try to parse the Kernel
        try:
            decoded = json.loads(kernel)
            weights = np.array(decoded, dtype=np.float32)
        except (json.decoder.JSONDecodeError, ValueError, TypeError):
            raise QgsProcessingException(self.tr('Can not parse kernel string!'))
        
        if normalization == 0:
            weights = weights / weights.sum()
        else:
            weights = weights / normalization
        


        # Open Raster with GDAL
        self.ds = gdal.Open(inputlayer.source())

        if not self.ds:
            raise Exception("Failed to open Raster Layer")
        
        # x in gdal is y dimension un numpy (the first dimension)
        xs , ys = self.ds.RasterXSize , self.ds.RasterYSize

        self.bandcount = self.ds.RasterCount
        self.gt = self.ds.GetGeoTransform()
        
        self.nodata = self.ds.GetRasterBand(1).GetNoDataValue()


        # Prepare output
        driver = gdal.GetDriverByName('GTiff')
        self.out_ds = driver.CreateCopy(self.output_raster, self.ds, strict=0)

        # Iterate over bands and calculate Convolution

        for i in range(1, self.bandcount + 1):
            a = self.ds.GetRasterBand(i).ReadAsArray()
            filtered = ndimage.convolve(a, weights, **kargs)
            self.out_ds.GetRasterBand(i).WriteArray(filtered)

            feedback.setProgress(i * 100 / self.bandcount)
            if feedback.isCanceled():
                return {}

        # Close the dataset to write file to disk
        self.out_ds = None 

        return {self.OUTPUT: self.output_raster}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'convolve'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('Convolution')

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''
    
    def shortHelpString(self):
      
        h =  """
             Convolve raster with given kernel.
             Kernel: String representation of array
             Normalization: Normalize the kernel by deviding through given value; set to 0 to devide through the sum of kernel values.
             Border mode: Determine how input is extended around the edges.
             Origin: Shift the filter
             """
		
        return self.tr(h)

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return SciPyConvolveAlgorithm()
