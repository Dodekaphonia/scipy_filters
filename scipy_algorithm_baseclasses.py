# -*- coding: utf-8 -*-

"""
/***************************************************************************
 SciPyFilters
                                 A QGIS plugin
 Filter collection implemented with SciPy
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-03-03
        copyright            : (C) 2024 by Florian Neukirchen
        email                : mail@riannek.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Florian Neukirchen'
__date__ = '2024-03-03'
__copyright__ = '(C) 2024 by Florian Neukirchen'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from osgeo import gdal
from scipy import ndimage
from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterRasterDestination,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterBand,
                        )

# Group IDs and group names
groups = {
    'edges': 'Edges',
}


class SciPyAlgorithm(QgsProcessingAlgorithm):
    """
    Lowest level base class for algorithms based on SciPy.

    The function to be called is returned by the function
    get_fct(), needs to be overwritten by inheriting classes.
    Name, displayname, help are set as class variables, to be 
    overwritten by inheriting classes.

    In inheriting classes, parameters can be added by:
    1) setting constants as class variables
    2) overwriting the function initAlgorithm (don't forget to call
       the same function on super())
    3) overwriting the function get_parameters (don't forget to call
       the same function on super())

    Inheriting classes must implement createInstance, returning an
    instance of the class, e.g.:

    def createInstance(self):
        return SciPyGaussianAlgorithm()
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'
    
    # The following constants are supposed to be overwritten
    _name = 'name, short, lowercase without spaces'
    _displayname = 'User-visible name'
    _outputname = None # If set to None, the displayname is used 
    _groupid = "" 
    _help = """
            Help
            """
    # Return the function to be called, to be overwritten
    def get_fct(self):
        return ndimage.laplace

    # Init Algorithm
    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # Add parameters
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.INPUT,
                self.tr('Input layer'),
            )
        )

        if not self._outputname:
            self._outputname = self._displayname

        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT,
            self.tr(self._outputname)))
        
    def get_parameters(self, parameters, context):
        """
        Factoring this out of processAlgorithm allows to add Parameters
        in classes inheriting form this base class by overwriting this
        function. 

        Returns kargs dictionary and sets variables self.variable for 
        non-keyword arguments.

        This is the most basic base class and kargs is empty {}.
        """
        self.inputlayer = self.parameterAsRasterLayer(parameters, self.INPUT, context)
        self.output_raster = self.parameterAsOutputLayer(parameters, self.OUTPUT,context)

        return {}


    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Get Parameters
        kargs = self.get_parameters(parameters, context)

        print(kargs)

        self.fct = self.get_fct()

        # Open Raster with GDAL
        self.ds = gdal.Open(self.inputlayer.source())

        if not self.ds:
            raise Exception("Failed to open Raster Layer")
        
        self.bandcount = self.ds.RasterCount

        # Prepare output
        driver = gdal.GetDriverByName('GTiff')
        self.out_ds = driver.CreateCopy(self.output_raster, self.ds, strict=0)

        # Iterate over bands and calculate 

        print(self.fct)

        for i in range(1, self.bandcount + 1):
            a = self.ds.GetRasterBand(i).ReadAsArray()
            # The actual function
            filtered = self.fct(a, **kargs)

            self.out_ds.GetRasterBand(i).WriteArray(filtered)

            feedback.setProgress(i * 100 / self.bandcount)
            if feedback.isCanceled():
                return {}

        # Close the dataset to write file to disk
        self.out_ds = None 

        return {self.OUTPUT: self.output_raster}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return self._name

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self._displayname)

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        if self._groupid == "":
            return ""
        s = groups.get(self._groupid)
        if not s:
            # If group ID is not in dictionary group, return error message for debugging
            return "Displayname of group must be set in groups dictionary"
        return self.tr(s)

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return self._groupid
    
    def shortHelpString(self):
        """
        Returns the help string that is shown on the right side of the 
        user interface.
        """
        return self.tr(self._help)

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)


class SciPyAlgorithmWithMode(SciPyAlgorithm):
    """
    Base class with added mode and cval; used by laplace etc.
    """

    MODE = 'MODE'
    CVAL = 'CVAL'

    modes = ['reflect', 'constant', 'nearest', 'mirror', 'wrap']

    def initAlgorithm(self, config):
        super().initAlgorithm(config)

        self.addParameter(QgsProcessingParameterEnum(
            self.MODE,
            self.tr('Border Mode'),
            [mode.capitalize() for mode in self.modes],
            defaultValue=0)) 
        
        self.addParameter(QgsProcessingParameterNumber(
            self.CVAL,
            self.tr('Constant value past edges for border mode "constant"'),
            QgsProcessingParameterNumber.Type.Double,
            defaultValue=0, 
            optional=True, 
            minValue=0, 
            # maxValue=100
            ))      
    
    def get_parameters(self, parameters, context):
        kargs = super().get_parameters(parameters, context)

        mode = self.parameterAsInt(parameters, self.MODE, context) 
        kargs['mode'] = self.modes[mode]

        cval = self.parameterAsDouble(parameters, self.CVAL, context)
        if cval:
            kargs['cval'] = cval

        return kargs
    

class SciPyAlgorithmWithModeAxis(SciPyAlgorithmWithMode):
    """
    Base class with added mode and cval and axis; used by sobel etc.
    """

    AXIS = 'AXIS'
    axis_modes = ['Horizontal edges', 'Vertical edges', 'Magnitude']

    def initAlgorithm(self, config):
        
        self.addParameter(QgsProcessingParameterEnum(
            self.AXIS,
            self.tr('Axis'),
            self.axis_modes,
            defaultValue=0)) 
        
        super().initAlgorithm(config)
           
    def get_parameters(self, parameters, context):
        """Axis parameter must be set in inheriting class to implement magnitude"""
        kargs = super().get_parameters(parameters, context)

        self.axis_mode = self.parameterAsInt(parameters, self.AXIS, context) 
      
        return kargs