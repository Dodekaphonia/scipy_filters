# -*- coding: utf-8 -*-

"""
/***************************************************************************
 SciPyFilters
                                 A QGIS plugin
 Filter collection implemented with SciPy
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-03-03
        copyright            : (C) 2024 by Florian Neukirchen
        email                : mail@riannek.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Florian Neukirchen'
__date__ = '2024-03-03'
__copyright__ = '(C) 2024 by Florian Neukirchen'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import json
import numpy as np
from osgeo import gdal
from scipy import ndimage
from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterRasterDestination,
                       QgsProcessingParameterString,
                       QgsProcessingParameterBoolean,
                       QgsProcessingException,
                        )


class SciPyTophatAlgorithm(QgsProcessingAlgorithm):
    """
    Morphological Filters: Tophat, morphological gradient, morphological laplace.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'
    ALGORITHM = 'ALGORITHM' 
    SIZE = 'SIZE'
    STRUCTURE = 'STRUCTURE'
    CUSTOMSTRUCTURE = 'CUSTOMSTRUCTURE'
    MODE = 'MODE'
    CVAL = 'CVAL'
    FOOTPRINT = 'FOOTPRINT'
    BOOLFOOTPRINT = 'BOOLFOOTPRINT'
    

    def getAlgs(self):
        return ['White Tophat', 'Black Tophat', 'Morphological Gradient', 'Morphological Laplace']


    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # Add parameters

        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.INPUT,
                self.tr('Input layer'),
            )
        )

        self.algorithms = self.getAlgs()

        self.addParameter(QgsProcessingParameterEnum(
            self.ALGORITHM,
            self.tr('Morphological Filter'),
            self.algorithms,
            defaultValue=0)) 

        self.addParameter(QgsProcessingParameterEnum(
            self.STRUCTURE,
            self.tr('Structure'),
            ["Cross", "Square", "Custom"],
            defaultValue=1)) 

        self.addParameter(QgsProcessingParameterString(
            self.CUSTOMSTRUCTURE,
            self.tr('Custom structure (array), ignored if structure is set to cross or square'),
            defaultValue="[[1, 1, 1],\n[1, 1, 1],\n[1, 1, 1]]",
            multiLine=True,
            optional=True,
            ))
        

        self.addParameter(QgsProcessingParameterNumber(
            self.SIZE,
            self.tr('Size (Optional if footprint or structure provided, use 0 for no size)'),
            QgsProcessingParameterNumber.Type.Integer,
            defaultValue=0, 
            optional=True, 
            minValue=0, 
            # maxValue=100
            ))    
        
    
        self.modes = ['reflect', 'constant', 'nearest', 'mirror', 'wrap']

        self.addParameter(QgsProcessingParameterEnum(
            self.MODE,
            self.tr('Border Mode'),
            self.modes,
            defaultValue=0)) 
        
        self.addParameter(QgsProcessingParameterNumber(
            self.CVAL,
            self.tr('Constant value past edges for border mode "constant"'),
            QgsProcessingParameterNumber.Type.Double,
            defaultValue=0, 
            optional=True, 
            minValue=0, 
            # maxValue=100
            ))    

        self.addParameter(QgsProcessingParameterBoolean(
            self.BOOLFOOTPRINT,
            self.tr('Use footprint array'),
            defaultValue=False, 
            optional=True
            )) 
        
        default_kernel = "[[1, 1, 1],\n[1, 1, 1],\n[1, 1, 1]]"

        self.addParameter(QgsProcessingParameterString(
            self.FOOTPRINT,
            self.tr('Footprint array'),
            defaultValue=default_kernel,
            multiLine=True,
            optional=True,
            ))
        
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT,
            self.tr("Morphology: Tophat or Gradient")))

    def checkParameterValues(self, parameters, context): 

        structure = self.parameterAsInt(parameters, self.STRUCTURE, context)
        if structure == 2:
            custom = self.parameterAsString(parameters, self.CUSTOMSTRUCTURE, context)
            try:
                decoded = json.loads(custom)
                _ = np.array(decoded, dtype=np.float32)
            except (json.decoder.JSONDecodeError, ValueError, TypeError):
                return (False, self.tr('Can not parse custom structure string'))
        
        footprintbool = self.parameterAsBool(parameters, self.BOOLFOOTPRINT, context)
        footprint = self.parameterAsString(parameters, self.FOOTPRINT, context)

        if footprintbool and not footprint.strip() == "":
            try:
                decoded = json.loads(footprint)
                _ = np.array(decoded, dtype=np.float32)
            except (json.decoder.JSONDecodeError, ValueError, TypeError):
                return (False, self.tr('Can not parse footprint string'))

        return super().checkParameterValues(parameters, context)


    def morphologyfnct(self, idx):
        alg = self.algorithms[idx]
        if alg == 'Black Tophat':
            fct = ndimage.black_tophat
        elif alg == 'Morphological Gradient':
            fct = ndimage.morphological_gradient
        elif alg == 'Morphological Laplace':
            fct = ndimage.morphological_laplace
        else:
            fct = ndimage.white_tophat
        return fct


    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Get Parameters
        self.kargs = {}

        inputlayer = self.parameterAsRasterLayer(parameters, self.INPUT, context)

        self.output_raster = self.parameterAsOutputLayer(parameters, self.OUTPUT, context)

        self.alg = self.parameterAsInt(parameters, self.ALGORITHM, context)
        self.fct = self.morphologyfnct(self.alg)
        

        structure = self.parameterAsInt(parameters, self.STRUCTURE, context) 
        if structure in (0,1):
            self.kargs['structure'] = ndimage.generate_binary_structure(2,structure + 1)
        else:
            structure = self.parameterAsString(parameters, self.CUSTOMSTRUCTURE, context)
            # Try to parse the Structure
            try:
                decoded = json.loads(structure)
                structure = np.array(decoded, dtype=np.float32)
            except (json.decoder.JSONDecodeError, ValueError, TypeError):
                raise QgsProcessingException(self.tr('Can not parse custom structure string!'))
            self.kargs['structure'] = structure


        size = iterations = self.parameterAsInt(parameters, self.SIZE, context)
        if size and (size > 0):
            self.kargs['size'] = size
        footprintbool = self.parameterAsBool(parameters, self.BOOLFOOTPRINT, context)
        footprint = self.parameterAsString(parameters, self.FOOTPRINT, context)
        if footprintbool and footprint:
            # Try to parse the Footprint
            try:
                decoded = json.loads(footprint)
                footprint = np.array(decoded, dtype=np.float32)
            except (json.decoder.JSONDecodeError, ValueError, TypeError):
                raise QgsProcessingException(self.tr('Can not parse Footprint string!'))
            self.kargs['footprint'] = footprint
        else:
            if not size:
                # Either size or footprint must be set
                self.kargs['size'] = 1

        mode = self.parameterAsInt(parameters, self.MODE, context) 
        self.kargs['mode'] = self.modes[mode]

        cval = self.parameterAsDouble(parameters, self.CVAL, context)
        if cval:
            self.kargs['cval'] = cval

                

        # Open Raster with GDAL
        self.ds = gdal.Open(inputlayer.source())

        if not self.ds:
            raise Exception("Failed to open Raster Layer")
        
        self.bandcount = self.ds.RasterCount

        # Prepare output
        driver = gdal.GetDriverByName('GTiff')
        self.out_ds = driver.CreateCopy(self.output_raster, self.ds, strict=0)

        # Iterate over bands and calculate 

        for i in range(1, self.bandcount + 1):
            a = self.ds.GetRasterBand(i).ReadAsArray()
            filtered = self.fct(a, **self.kargs)
            self.out_ds.GetRasterBand(i).WriteArray(filtered)

            feedback.setProgress(i * 100 / self.bandcount)
            if feedback.isCanceled():
                return {}

        # Close the dataset to write file to disk
        self.out_ds = None 


        return {self.OUTPUT: self.output_raster}
    

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr("Morphological Filters")

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'morphological'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)


    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'tophat'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('Tophat, morphological gradient/laplace') 
    
    def shortHelpString(self):
        h =  """
                Morphological filters: black/white tophat, morphological gradient/laplace.  
                White tophat: difference between input raster and it's opening. Extracts white spots smaller than the structural element.
                Black tophat: difference between input raster and it's closing. Extracts black spots smaller than the structural element.
                Morphological gradient: difference between dilation and erosion.
                Morphological laplace: difference between internal and external gradient.
                Parameters:
                Size: Size of flat and full structuring element, optional if footpring or structure is provided.
                Structure: Structuring element of filter
                Footprint: Positions of elements of a flat structuring element used for the filter.
                Border mode: Determine how input is extended around the edges. 
                """
    
        return self.tr(h)
    
    def createInstance(self):
        return SciPyTophatAlgorithm()

