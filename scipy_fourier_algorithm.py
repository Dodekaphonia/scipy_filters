# -*- coding: utf-8 -*-

"""
/***************************************************************************
 SciPyFilters
                                 A QGIS plugin
 Filter collection implemented with SciPy
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-03-03
        copyright            : (C) 2024 by Florian Neukirchen
        email                : mail@riannek.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Florian Neukirchen'
__date__ = '2024-03-03'
__copyright__ = '(C) 2024 by Florian Neukirchen'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from osgeo import gdal
from scipy import ndimage, fft, signal
from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterRasterDestination,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterBand,
                        )

from .scipy_algorithm_baseclasses import SciPyAlgorithm


class SciPyFourierGaussianAlgorithm(SciPyAlgorithm):
    """
    Gaussian fourier filter 


    """

    # Overwrite constants of base class
    _name = 'gaussian_fourier'
    _displayname = 'Gaussian Fourier'
    _outputname = None # If set to None, the displayname is used 
    _groupid = "blur" 
    _help = """
            Gaussian filter calculated by multiplication in the frequency domain. \
            This is faster with large kernels (large sigma).

            The input band is transformed with fast fourier transform (FFT) \
            using fft2 (for 2D) or fftn (for 3D) from \
            <a href="https://docs.scipy.org/doc/scipy/reference/fft.html">scipy.ndimage</a>.
            The multiplication with the fourier transform of a gaussian kernel \
            is calculated with fourier_gaussian from \
            <a href="https://docs.scipy.org/doc/scipy/reference/ndimage.html">scipy.ndimage</a>. \
            The product is transformed back with ifft2 or ifftn, respectively. \
            Only the real part of the resulting complex \
            numbers is returned.

            <b>Dimension</b> Calculate for each band separately (2D) \
            or use all bands as a 3D datacube and perform filter in 3D. \
            Note: bands will be the first axis of the datacube.
        
            <b>Sigma</b> Standard deviation of the gaussian filter.
            """
    
    SIGMA = 'SIGMA'

    # def initAlgorithm(self, config):
    #     # Set dimensions to 2
    #     self._dimension = self.Dimensions.twoD
    #     super().initAlgorithm(config)

    def insert_parameters(self, config):

        self.addParameter(QgsProcessingParameterNumber(
            self.SIGMA,
            self.tr('Sigma'),
            QgsProcessingParameterNumber.Type.Double,
            defaultValue=5, 
            optional=False, 
            minValue=0, 
            maxValue=100
            ))
        
        super().insert_parameters(config)

    
    def get_parameters(self, parameters, context):
        kwargs = super().get_parameters(parameters, context)
        kwargs['sigma'] = self.parameterAsDouble(parameters, self.SIGMA, context)
        return kwargs
    
    # The function to be called, to be overwritten
    def get_fct(self):
        if self._dimension == self.Dimensions.threeD:
            return self.my_fct_3D
        else:
            return self.my_fct_2D

    def my_fct_2D(self, input_raster, **kwargs):
        input_fft = fft.fft2(input_raster)
        result = ndimage.fourier_gaussian(input_fft, **kwargs)
        result = fft.ifft2(result)
        return result.real

    def my_fct_3D(self, input_raster, **kwargs):
        input_fft = fft.fftn(input_raster)
        result = ndimage.fourier_gaussian(input_fft, **kwargs)
        result = fft.ifftn(result)
        return result.real

    def createInstance(self):
        return SciPyFourierGaussianAlgorithm()