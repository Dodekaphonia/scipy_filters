# -*- coding: utf-8 -*-

"""
/***************************************************************************
 SciPyFilters
                                 A QGIS plugin
 Filter collection implemented with SciPy
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-03-03
        copyright            : (C) 2024 by Florian Neukirchen
        email                : mail@riannek.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Florian Neukirchen'
__date__ = '2024-03-03'
__copyright__ = '(C) 2024 by Florian Neukirchen'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import numpy as np
from osgeo import gdal
from scipy import ndimage, signal
from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterRasterDestination,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterBand,
                        )
from .scipy_algorithm_baseclasses import (SciPyAlgorithm,
                                          SciPyAlgorithmWithMode,
                                          SciPyAlgorithmWithModeAxis,
                                          SciPyStatisticalAlgorithm,
                                          QgsProcessingParameterString)



class SciPyWienerAlgorithm(SciPyAlgorithm):
    """
    Wiener filter 

    """

    SIZE = 'SIZE'
    NOISE = 'NOISE'

    # Overwrite constants of base class
    _name = 'wiener'
    _displayname = 'Wiener filter'
    _outputname = None
    _groupid = "enhance" 
    _help = """
            Wiener filter (noise reduction). \
            Calculated with wiener from \
            <a href="https://docs.scipy.org/doc/scipy/reference/signal.html">scipy.signal</a>.

            <b>Dimension</b> Calculate for each band separately (2D) \
            or use all bands as a 3D datacube and perform filter in 3D. \
            Note: bands will be the first axis of the datacube.

            <b>Size</b> Size of filter. Can be integer \
            (same size for all dimensions) or a list of integers \
            with a value for every dimension. In both cases, all values must \
            be odd.

            <b>noise</b> The noise-power to use. If not set, estimate noise from \
            local variance.
            """
    
    # The function to be called, to be overwritten
    def get_fct(self):
        return signal.wiener
    
    def initAlgorithm(self, config):
        # Call the super function first
        # (otherwise input is not the first parameter in the GUI)
        super().initAlgorithm(config)

        self.addParameter(QgsProcessingParameterString(
            self.SIZE,
            self.tr('Size: integer (odd) or array of odd integers with sizes for every dimension'),
            defaultValue="5", 
            optional=False, 
            ))  

        self.addParameter(QgsProcessingParameterNumber(
            self.NOISE,
            self.tr('Size'),
            QgsProcessingParameterNumber.Type.Double,
            # defaultValue=5, 
            optional=True, 
            minValue=0, 
            ))    
        
    def get_parameters(self, parameters, context):
        kwargs = super().get_parameters(parameters, context)

        size = self.parameterAsInt(parameters, self.SIZE, context)
        size = self.str_to_int_or_list(size)
        
        kwargs['mysize'] = size
        kwargs['noise'] = self.parameterAsDouble(parameters, self.NOISE, context)

        return kwargs


    def checkParameterValues(self, parameters, context): 

        size = self.parameterAsString(parameters, self.SIZE, context)

        dims = 2
        if self._dimension == self.Dimensions.nD:
            dim_option = self.parameterAsInt(parameters, self.DIMENSION, context)
            if dim_option == 1:
                dims = 3

        
        try:
            size = self.str_to_int_or_list(size)
        except ValueError:
            return (False, self.tr("Can not parse size."))
        
        size = np.array(size)

        if not (size.size == 1 or size.size == dims):
            return (False, self.tr('Number of elements in array must match the number of dimensions'))
        
        if np.any(size % 2 == 0):
            return (False, self.tr('Every element in size must be odd.'))

        return super().checkParameterValues(parameters, context)


    def createInstance(self):
        return SciPyWienerAlgorithm()