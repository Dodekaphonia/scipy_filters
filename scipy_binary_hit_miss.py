# -*- coding: utf-8 -*-

"""
/***************************************************************************
 SciPyFilters
                                 A QGIS plugin
 Filter collection implemented with SciPy
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-03-03
        copyright            : (C) 2024 by Florian Neukirchen
        email                : mail@riannek.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Florian Neukirchen'
__date__ = '2024-03-03'
__copyright__ = '(C) 2024 by Florian Neukirchen'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import json
import numpy as np
from osgeo import gdal
from scipy import ndimage
from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterRasterDestination,
                       QgsProcessingParameterString,
                       QgsProcessingParameterBoolean,
                       QgsProcessingException,
                        )


class SciPyBinaryHitMissAlgorithm(QgsProcessingAlgorithm):
    """
    Morphological Filters: Tophat, morphological gradient, morphological laplace.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'
    STRUCTURE1 = 'STRUCTURE1'
    CUSTOMSTRUCTURE1 = 'CUSTOMSTRUCTURE1'
    STRUCTURE2 = 'STRUCTURE2'
    CUSTOMSTRUCTURE2 = 'CUSTOMSTRUCTURE2'
      


    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # Add parameters

        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.INPUT,
                self.tr('Input layer'),
            )
        )

        self.addParameter(QgsProcessingParameterEnum(
            self.STRUCTURE1,
            self.tr('Structure 1'),
            ["Cross", "Square", "Custom"],
            defaultValue=1)) 

        self.addParameter(QgsProcessingParameterString(
            self.CUSTOMSTRUCTURE1,
            self.tr('Structure 1: Custom structure (array), ignored if structure is set to cross or square'),
            defaultValue="[[1, 0, 0],\n[0, 1, 1],\n[0, 1, 1]]",
            multiLine=True,
            optional=True,
            ))
        
        self.addParameter(QgsProcessingParameterEnum(
            self.STRUCTURE2,
            self.tr('Structure 2'),
            ["Cross", "Square", "Custom"],
            defaultValue=1)) 

        self.addParameter(QgsProcessingParameterString(
            self.CUSTOMSTRUCTURE2,
            self.tr('Structure 2: Custom structure (array), ignored if structure is set to cross or square'),
            defaultValue="[[1, 1, 1],\n[1, 1, 1],\n[1, 1, 1]]",
            multiLine=True,
            optional=True,
            ))
               
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT,
            self.tr("Morphology: binary hit or miss")))

    def checkParameterValues(self, parameters, context): 

        structure1 = self.parameterAsInt(parameters, self.STRUCTURE1, context)
        if structure1 == 2:
            custom = self.parameterAsString(parameters, self.CUSTOMSTRUCTURE1, context)
            try:
                decoded = json.loads(custom)
                _ = np.array(decoded, dtype=np.float32)
            except (json.decoder.JSONDecodeError, ValueError, TypeError):
                return (False, self.tr('Structure 1: Can not parse custom structure string'))

        structure2 = self.parameterAsInt(parameters, self.STRUCTURE2, context)
        if structure2 == 2:
            custom = self.parameterAsString(parameters, self.CUSTOMSTRUCTURE2, context)
            try:
                decoded = json.loads(custom)
                _ = np.array(decoded, dtype=np.float32)
            except (json.decoder.JSONDecodeError, ValueError, TypeError):
                return (False, self.tr('Structure 2: Can not parse custom structure string'))
                    
        return super().checkParameterValues(parameters, context)



    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Get Parameters
        self.kargs = {}

        inputlayer = self.parameterAsRasterLayer(parameters, self.INPUT, context)

        self.output_raster = self.parameterAsOutputLayer(parameters, self.OUTPUT, context)
      

        structure1 = self.parameterAsInt(parameters, self.STRUCTURE1, context) 
        if structure1 in (0,1):
            self.kargs['structure1'] = ndimage.generate_binary_structure(2, structure1 + 1)
        else:
            structure = self.parameterAsString(parameters, self.CUSTOMSTRUCTURE1, context)
            # Try to parse the Structure
            try:
                decoded = json.loads(structure1)
                structure1 = np.array(decoded, dtype=np.float32)
            except (json.decoder.JSONDecodeError, ValueError, TypeError):
                raise QgsProcessingException(self.tr('Stucture 1: Can not parse custom structure string!'))
            self.kargs['structure1'] = structure1

        structure2 = self.parameterAsInt(parameters, self.STRUCTURE2, context) 
        if structure2 in (0,1):
            self.kargs['structure2'] = ndimage.generate_binary_structure(2, structure2 + 1)
        else:
            structure2 = self.parameterAsString(parameters, self.CUSTOMSTRUCTURE2, context)
            # Try to parse the Structure
            try:
                decoded = json.loads(structure2)
                structure2 = np.array(decoded, dtype=np.float32)
            except (json.decoder.JSONDecodeError, ValueError, TypeError):
                raise QgsProcessingException(self.tr('Stucture 2: Can not parse custom structure string!'))
            self.kargs['structure2'] = structure2

        # Open Raster with GDAL
        self.ds = gdal.Open(inputlayer.source())

        if not self.ds:
            raise Exception("Failed to open Raster Layer")
        
        self.bandcount = self.ds.RasterCount

        # Prepare output
        driver = gdal.GetDriverByName('GTiff')
        self.out_ds = driver.CreateCopy(self.output_raster, self.ds, strict=0)

        # Iterate over bands and calculate 

        for i in range(1, self.bandcount + 1):
            a = self.ds.GetRasterBand(i).ReadAsArray()
            filtered = ndimage.binary_hit_or_miss(a, **self.kargs)
            self.out_ds.GetRasterBand(i).WriteArray(filtered)

            feedback.setProgress(i * 100 / self.bandcount)
            if feedback.isCanceled():
                return {}

        # Close the dataset to write file to disk
        self.out_ds = None 


        return {self.OUTPUT: self.output_raster}
    

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr("Morphological Filters")

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'morphological'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)


    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'hit_or_miss'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('Morphological (binary) hit or miss') 
    
    def shortHelpString(self):
        h = """
            Preserves pixels whose neighbourhood matches structure1, but does not match the (disjoint) structure2. 
            """
    
        return self.tr(h)
    
    def createInstance(self):
        return SciPyBinaryHitMissAlgorithm()

