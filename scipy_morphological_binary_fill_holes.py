# -*- coding: utf-8 -*-

"""
/***************************************************************************
 SciPyFilters
                                 A QGIS plugin
 Filter collection implemented with SciPy
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-03-03
        copyright            : (C) 2024 by Florian Neukirchen
        email                : mail@riannek.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Florian Neukirchen'
__date__ = '2024-03-03'
__copyright__ = '(C) 2024 by Florian Neukirchen'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'


from osgeo import gdal
from scipy import ndimage
from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterRasterDestination,
                       QgsProcessingParameterString,
                       QgsProcessingException,
                        )

from .scipy_algorithm_baseclasses import SciPyAlgorithm


class SciPyBinaryFillHolesAlgorithm(SciPyAlgorithm):

    STRUCTURE = 'STRUCTURE'
    CUSTOMSTRUCTURE = 'CUSTOMSTRUCTURE'

    # Overwrite constants of base class
    _name = 'fill_holes'
    _displayname = 'Morphological (binary) fill holes'
    _outputname = "Morphology: Fill holes" # If set to None, the displayname is used 
    _groupid = 'morphological'
    _help = """
            Fill holes in binary shapes by using binary dilations. \
            Calculated for every band with  \
            binary_fill_holes from \
            <a href="https://docs.scipy.org/doc/scipy/reference/ndimage.html">scipy.ndimage</a>.

            <b>Structure</b> Structuring element of filter, can be cross, square or custom. 
            <b>Custom structure</b> String representation of array, only used if "Structure" is set to "Custom".
            """
    
    # The function to be called
    def get_fct(self):
        return ndimage.binary_fill_holes

 
    def initAlgorithm(self, config):
        super().initAlgorithm(config)

        self.addParameter(QgsProcessingParameterEnum(
            self.STRUCTURE,
            self.tr('Structure'),
            ["Cross", "Square", "Custom"],
            defaultValue=1)) 

        self.addParameter(QgsProcessingParameterString(
            self.CUSTOMSTRUCTURE,
            self.tr('Custom structure (array), ignored if structure is set to cross or square'),
            defaultValue="[[1, 1, 1],\n[1, 1, 1],\n[1, 1, 1]]",
            multiLine=True,
            optional=True,
            ))

    def get_parameters(self, parameters, context):
        kwargs = super().get_parameters(parameters, context)

        structure = self.parameterAsInt(parameters, self.STRUCTURE, context) 
        if structure in (0,1):
            kwargs['structure'] = ndimage.generate_binary_structure(2,structure + 1)
        else:
            structure = self.parameterAsString(parameters, self.CUSTOMSTRUCTURE, context)
            kwargs['structure'] = self.str_to_array(structure)

        return kwargs
    
    
    def checkParameterValues(self, parameters, context): 
        structure = self.parameterAsInt(parameters, self.STRUCTURE, context)
        if structure == 2:
            structure = self.parameterAsString(parameters, self.CUSTOMSTRUCTURE, context)
            ok, s = self.check_structure(structure)
            if not ok:
                return (ok, s)
        
        return super().checkParameterValues(parameters, context)
    
    def createInstance(self):
        return SciPyBinaryFillHolesAlgorithm()

