# -*- coding: utf-8 -*-

"""
/***************************************************************************
 SciPyFilters
                                 A QGIS plugin
 Filter collection implemented with SciPy
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-03-03
        copyright            : (C) 2024 by Florian Neukirchen
        email                : mail@riannek.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Florian Neukirchen'
__date__ = '2024-03-03'
__copyright__ = '(C) 2024 by Florian Neukirchen'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import json
import numpy as np
from osgeo import gdal
from scipy import ndimage
from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterRasterDestination,
                       QgsProcessingParameterString,
                       QgsProcessingException,
                        )


class SciPyMorphologicalBaseAlgorithm(QgsProcessingAlgorithm):
    """
    Base Class for Morphological Filters, not to be used directly
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'
    ALGORITHM = 'ALGORITHM' 
    STRUCTURE = 'STRUCTURE'
    CUSTOMSTRUCTURE = 'CUSTOMSTRUCTURE'
    

    def getAlgs(self):
        return ['Dilation', 'Erosion', 'Closing', 'Opening']


    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        print("init base")

        # Add parameters

        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.INPUT,
                self.tr('Input layer'),
            )
        )

        self.algorithms = self.getAlgs()

        self.addParameter(QgsProcessingParameterEnum(
            self.ALGORITHM,
            self.tr('Filter'),
            self.algorithms,
            defaultValue=0)) 

        self.addParameter(QgsProcessingParameterEnum(
            self.STRUCTURE,
            self.tr('Structure'),
            ["Cross", "Square", "Custom"],
            defaultValue=1)) 

        self.addParameter(QgsProcessingParameterString(
            self.CUSTOMSTRUCTURE,
            self.tr('Custom structure (array), ignored if structure is set to cross or square'),
            defaultValue="[[1, 1, 1],\n[1, 1, 1],\n[1, 1, 1]]",
            multiLine=True,
            optional=True,
            ))

    def checkParameterValues(self, parameters, context): 
        """base class: check values and call the same function of super class"""   
        print("Check base") 
        structure = self.parameterAsInt(parameters, self.STRUCTURE, context)
        print("b", structure)
        if structure == 2:
            custom = self.parameterAsString(parameters, self.CUSTOMSTRUCTURE, context)
            print("xx", custom)
            try:
                decoded = json.loads(custom)
                _ = np.array(decoded, dtype=np.float32)
            except (json.decoder.JSONDecodeError, ValueError, TypeError):
                return (False, self.tr('Can not parse custom structure string'))
        
        return super().checkParameterValues(parameters, context)


    def morphologyfnct(self, idx):
        alg = self.algorithms[idx]
        if alg == 'Dilation':
            fct = ndimage.binary_dilation
        elif alg == 'Erosion':
            fct = ndimage.binary_erosion
        elif alg == 'Closing':
            fct = ndimage.binary_closing
        else:
            fct = ndimage.binary_opening
        return fct


    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Get Parameters
        self.kargs = {}

        inputlayer = self.parameterAsRasterLayer(parameters, self.INPUT, context)

        self.output_raster = self.parameterAsOutputLayer(parameters, self.OUTPUT, context)

        self.alg = self.parameterAsInt(parameters, self.ALGORITHM, context)
        self.fct = self.morphologyfnct(self.alg)
        

        structure = self.parameterAsInt(parameters, self.STRUCTURE, context) 
        if structure in (0,1):
            self.kargs['structure'] = ndimage.generate_binary_structure(2,structure + 1)
        else:
            structure = self.parameterAsString(parameters, self.CUSTOMSTRUCTURE, context)
            # Try to parse the Footprint
            try:
                decoded = json.loads(structure)
                structure = np.array(decoded, dtype=np.float32)
            except (json.decoder.JSONDecodeError, ValueError, TypeError):
                raise QgsProcessingException(self.tr('Can not parse custom structure string!'))
            self.kargs['structure'] = structure

        if isinstance(self, SciPyBinaryMorphologicalAlgorithm):
            masklayer = self.parameterAsRasterLayer(parameters, self.MASK, context)
            iterations = self.parameterAsInt(parameters, self.MASK, context)
            if iterations:
                self.kargs['iterations'] = iterations
            bordervalue = self.parameterAsInt(parameters, self.BORDERVALUE, context)
            if bordervalue:
                self.kargs['border_value'] = bordervalue
        else:
            masklayer = None

        if isinstance(self, SciPyGreyMorphologicalAlgorithm):
            size = iterations = self.parameterAsInt(parameters, self.SIZE, context)
            if size:
                self.kargs['size'] = size
            footprint = self.parameterAsString(parameters, self.FOOTPRINT, context)
            if footprint:
                # Try to parse the Footprint
                try:
                    decoded = json.loads(footprint)
                    footprint = np.array(decoded, dtype=np.float32)
                except (json.decoder.JSONDecodeError, ValueError, TypeError):
                    raise QgsProcessingException(self.tr('Can not parse Footprint string!'))
                self.kargs['footprint'] = footprint
            else:
                if not size:
                    # Either size or footprint must be set
                    self.kargs['size'] = 1

            mode = self.parameterAsInt(parameters, self.MODE, context) 
            self.kargs['mode'] = self.modes[mode]

            cval = self.parameterAsDouble(parameters, self.CVAL, context)
            if cval:
                self.kargs['cval'] = cval

                

        # Open Raster with GDAL
        self.ds = gdal.Open(inputlayer.source())

        if not self.ds:
            raise Exception("Failed to open Raster Layer")
        
        self.bandcount = self.ds.RasterCount

        if masklayer:
            self.mask_ds = gdal.Open(masklayer.source())
            if not self.mask_ds:
                raise Exception("Failed to open Mask Layer")
            
            # Mask must have same crs etc.
            if not (self.mask_ds.GetProjection() == self.ds.GetProjection()
                    and self.mask_ds.RasterXSize == self.ds.RasterXSize
                    and self.mask_ds.RasterYSize == self.ds.RasterYSize
                    and self.mask_ds.GetGeoTransform() == self.ds.GetGeoTransform()):
                feedback.pushInfo("Mask layer does not match input layer, reprojecting mask.")

                geoTransform = self.ds.GetGeoTransform()

                kwargs = {"format": "GTiff", 'resampleAlg':'near'}
                kwargs["xRes"] = geoTransform[1]
                kwargs["yRes"] = abs(geoTransform[5])

                minx = geoTransform[0]
                maxy = geoTransform[3]
                maxx = minx + geoTransform[1] * self.ds.RasterXSize
                miny = maxy + geoTransform[5] * self.ds.RasterYSize

                kwargs["outputBounds"] = (minx, miny, maxx, maxy)

                warped_mask = gdal.Warp("/vsimem/tmpmask", self.mask_ds, **kwargs)
                self.kargs['mask'] = warped_mask.GetRasterBand(1).ReadAsArray()
            else:
                self.kargs['mask'] = self.mask_ds.GetRasterBand(1).ReadAsArray()

        # Prepare output
        driver = gdal.GetDriverByName('GTiff')
        self.out_ds = driver.CreateCopy(self.output_raster, self.ds, strict=0)

        # Iterate over bands and calculate 

        for i in range(1, self.bandcount + 1):
            a = self.ds.GetRasterBand(i).ReadAsArray()
            filtered = self.fct(a, **self.kargs)
            self.out_ds.GetRasterBand(i).WriteArray(filtered)

            feedback.setProgress(i * 100 / self.bandcount)
            if feedback.isCanceled():
                return {}

        # Close the dataset to write file to disk
        self.out_ds = None 


        return {self.OUTPUT: self.output_raster}
    

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr("Morphological Filters")

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'morphological'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)



class SciPyBinaryMorphologicalAlgorithm(SciPyMorphologicalBaseAlgorithm):

    ITERATIONS = 'ITERATIONS'
    MASK = 'MASK'
    BORDERVALUE = 'BORDERVALUE'


    def morphologyfnct(self, idx):
        alg = self.algorithms[idx]
        if alg == 'Dilation':
            fct = ndimage.binary_dilation
        elif alg == 'Erosion':
            fct = ndimage.binary_erosion
        elif alg == 'Closing':
            fct = ndimage.binary_closing
        else:
            fct = ndimage.binary_opening
        return fct
    


    def initAlgorithm(self, config):
        super().initAlgorithm(config)

        self.addParameter(QgsProcessingParameterNumber(
            self.ITERATIONS,
            self.tr('Iterations'),
            QgsProcessingParameterNumber.Type.Integer,
            defaultValue=1, 
            optional=True, 
            minValue=1, 
            # maxValue=100
            ))    
        
        self.addParameter(QgsProcessingParameterEnum(
            self.BORDERVALUE,
            self.tr('Border value (value at border of output array)'),
            ["0","1"],
            optional=True,
            defaultValue=0))
        
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.MASK,
                self.tr('Mask layer'),
                optional=True,
            )
        )

        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT,
            self.tr("Binary Morphology")))

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'binary_morphology'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('Binary Dilation, Erosion, Closing, Opening')
    
    def createInstance(self):
        return SciPyBinaryMorphologicalAlgorithm()




class SciPyGreyMorphologicalAlgorithm(SciPyMorphologicalBaseAlgorithm):

    SIZE = 'SIZE'
    FOOTPRINT = 'FOOTPRINT'
    MODE = 'MODE'
    CVAL = 'CVAL'

    def initAlgorithm(self, config):
        super().initAlgorithm(config)

        
        self.addParameter(QgsProcessingParameterNumber(
            self.SIZE,
            self.tr('Size (Optional if footprint provided)'),
            QgsProcessingParameterNumber.Type.Integer,
            defaultValue=1, 
            optional=True, 
            minValue=1, 
            # maxValue=100
            ))    
        
        default_kernel = "[[1, 1, 1],\n[1, 1, 1],\n[1, 1, 1]]"

        self.addParameter(QgsProcessingParameterString(
            self.FOOTPRINT,
            self.tr('Footprint array'),
            defaultValue=default_kernel,
            multiLine=True,
            optional=True,
            ))

    
        self.modes = ['reflect', 'constant', 'nearest', 'mirror', 'wrap']

        self.addParameter(QgsProcessingParameterEnum(
            self.MODE,
            self.tr('Border Mode'),
            self.modes,
            defaultValue=0)) 
        
        self.addParameter(QgsProcessingParameterNumber(
            self.CVAL,
            self.tr('Constant value past edges for border mode "constant"'),
            QgsProcessingParameterNumber.Type.Double,
            defaultValue=0, 
            optional=True, 
            minValue=0, 
            # maxValue=100
            ))    
        
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT,
            self.tr("Grey Morphology")))


    def checkParameterValues(self, parameters, context):     
        """Grey Morphology: check footprint and call checkvalues of super"""
        print("Check grey")
        footprint = self.parameterAsString(parameters, self.FOOTPRINT, context)

        if not footprint.strip() == "":
            try:
                decoded = json.loads(footprint)
                _ = np.array(decoded, dtype=np.float32)
            except (json.decoder.JSONDecodeError, ValueError, TypeError):
                return (False, self.tr('Can not parse footprint string'))
        
        return super().checkParameterValues(parameters, context)



    def morphologyfnct(self, idx):
        alg = self.algorithms[idx]
        if alg == 'Dilation':
            fct = ndimage.grey_dilation
        elif alg == 'Erosion':
            fct = ndimage.grey_erosion
        elif alg == 'Closing':
            fct = ndimage.grey_closing
        else:
            fct = ndimage.grey_opening
        return fct

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'grey_morphology'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('Grey Dilation, Erosion, Closing, Opening') 
    
    def createInstance(self):
        return SciPyGreyMorphologicalAlgorithm()

