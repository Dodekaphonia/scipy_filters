# -*- coding: utf-8 -*-

"""
/***************************************************************************
 SciPyFilters
                                 A QGIS plugin
 Filter collection implemented with SciPy
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-03-03
        copyright            : (C) 2024 by Florian Neukirchen
        email                : mail@riannek.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Florian Neukirchen'
__date__ = '2024-03-03'
__copyright__ = '(C) 2024 by Florian Neukirchen'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'


from osgeo import gdal
from scipy import ndimage
from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterRasterDestination,
                        )


class SciPyBinaryMorphologicalAlgorithm(QgsProcessingAlgorithm):
    """
    Binary Morphological Algorithm


    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'
    ALGORITHM = 'ALGORITHM' 
    STRUCTURE = 'STRUCTURE'
    MASK = 'MASK'
    ITERATIONS = 'ITERATIONS'


    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # Add parameters

        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.INPUT,
                self.tr('Input layer'),
            )
        )

        self.algorithms = ['Dilation', 'Erosion', 'Closing', 'Opening']


        self.addParameter(QgsProcessingParameterEnum(
            self.ALGORITHM,
            self.tr('Filter'),
            self.algorithms,
            defaultValue=0)) 

        self.addParameter(QgsProcessingParameterEnum(
            self.STRUCTURE,
            self.tr('Structure'),
            ["Cross", "Square"],
            defaultValue=1)) 

        self.addParameter(QgsProcessingParameterNumber(
            self.ITERATIONS,
            self.tr('Iterations'),
            QgsProcessingParameterNumber.Type.Integer,
            defaultValue=1, 
            optional=True, 
            minValue=1, 
            # maxValue=100
            ))    
        
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.MASK,
                self.tr('Mask layer'),
                optional=True,
            )
        )

        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT,
            self.tr("Binary Morphology")))
      
    def morphologyfnct(self, idx):
        alg = self.algorithms[idx]
        if alg == 'Dilation':
            fct = ndimage.binary_dilation
        elif alg == 'Erosion':
            fct = ndimage.binary_erosion
        elif alg == 'Closing':
            fct = ndimage.binary_closing
        else:
            fct = ndimage.binary_opening
        return fct



    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Get Parameters
        kargs = {}

        inputlayer = self.parameterAsRasterLayer(parameters, self.INPUT, context)
        masklayer = self.parameterAsRasterLayer(parameters, self.MASK, context)
        print("m", masklayer)
        self.output_raster = self.parameterAsOutputLayer(parameters, self.OUTPUT, context)

        self.alg = self.parameterAsInt(parameters, self.ALGORITHM, context)
        self.fct = self.morphologyfnct(self.alg)
        

        structure = self.parameterAsInt(parameters, self.STRUCTURE, context) + 1
        kargs['structure'] = ndimage.generate_binary_structure(2,structure)


        # Open Raster with GDAL
        self.ds = gdal.Open(inputlayer.source())

        if not self.ds:
            raise Exception("Failed to open Raster Layer")
        
        self.bandcount = self.ds.RasterCount

        if masklayer:
            self.mask_ds = gdal.Open(masklayer.source())
            if not self.mask_ds:
                raise Exception("Failed to open Mask Layer")
            kargs['mask'] = self.mask_ds.GetRasterBand(1).ReadAsArray()

        # Prepare output
        driver = gdal.GetDriverByName('GTiff')
        self.out_ds = driver.CreateCopy(self.output_raster, self.ds, strict=0)

        # Iterate over bands and calculate 

        for i in range(1, self.bandcount + 1):
            a = self.ds.GetRasterBand(i).ReadAsArray()
            filtered = self.fct(a, **kargs)
            self.out_ds.GetRasterBand(i).WriteArray(filtered)

            feedback.setProgress(i * 100 / self.bandcount)
            if feedback.isCanceled():
                return {}

        # Close the dataset to write file to disk
        self.out_ds = None 


        return {self.OUTPUT: self.output_raster}
    

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'binary_morphology'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('Binary Morphological Filter')

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return SciPyBinaryMorphologicalAlgorithm()
